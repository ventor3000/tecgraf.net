using System;
using System.Collections.Generic;
using System.Globalization;
using System.IO;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading;

namespace GenNative
{
    class Program
    {
        static void Main(string[] args)
        {
            string dir = Path.Combine(Path.GetDirectoryName(Assembly.GetExecutingAssembly().Location));
            string[] files = Directory.GetFiles(dir, "*.func", SearchOption.TopDirectoryOnly);
            
            Thread.CurrentThread.CurrentCulture = CultureInfo.InvariantCulture; //for date formatting

            foreach (string f in files)
            {
                string classname, dllname;
                string code=ParseFunctionsFile(f,out dllname,out classname);

                string outpath = Path.Combine(dir, "..\\src\\", classname + ".cs");
                Console.WriteLine("Writing " + outpath + "...");
                File.WriteAllText(outpath, code);
            }




            Console.WriteLine("Press enter to exit...");
            Console.ReadLine();

        }

        private static string ParseFunctionsFile(string f,out string dllname,out string classname)
        {

            StringBuilder sb = new StringBuilder();

            //possibly changed with the module command
            dllname = Path.GetFileNameWithoutExtension(f);
            classname = "Native" + dllname;


            string[] lines = File.ReadAllLines(f);

            foreach (string _line in lines)
            {
                string line = _line.Trim();
                line = line.Replace("\t", " ");
                if (line == "" || line.StartsWith("#")) //comment or empty
                    continue;

                string retval, rest, funcname;
                SplitAt(line, out retval, out rest, ' ');
                rest=rest.Trim();

                if (retval == "module")
                {
                    SplitAt(rest,out dllname,out classname,' ');
                }
                else
                {
                    sb.AppendLine();
                    sb.AppendLine("    [DllImport(libName,CallingConvention=CallingConvention.Cdecl)]");
                    sb.Append("    internal static extern ");

                    
                    sb.Append(retval);
                    sb.Append(" ");

                    
                    SplitAt(rest, out funcname, out rest, '(');
                    sb.Append(funcname); //function name
                    sb.Append("(");

                    

                    if (rest != null)
                    {
                        rest = rest.Replace("(", " ");
                        rest = rest.Replace(")", " ");
                        rest = rest.Replace(";", "");
                        rest = rest.Replace("...", "__arglist");

                        if (rest.Trim() != "void")
                        {

                            string[] args = rest.Split(new char[] { ',' }, StringSplitOptions.RemoveEmptyEntries);

                            List<string> parsedargs = new List<string>();
                            foreach (string targ in args)
                            {
                                string s = targ.Trim();
                                if (s.StartsWith("UTF8"))
                                    s = s.Replace("UTF8", "[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8Marshaler))] string");
                                parsedargs.Add(s);
                            }


                            sb.Append(string.Join(",", parsedargs));
                        }
                    }

                    sb.AppendLine(");");

                    
                }
            }

            

            StringBuilder final = new StringBuilder();
            final.AppendLine("using System;");
            final.AppendLine("using System.Runtime.InteropServices;");
            final.AppendLine("using System.Text;");
            final.AppendLine();
            final.AppendLine("// Autogenerated wrapper file");
            final.AppendLine("// Do not edit by hand!");
            final.AppendLine("// Generated " + DateTime.Now.ToLongDateString());
            final.AppendLine("");
            final.AppendLine("namespace Tecgraf {");
            final.AppendLine("  internal class " + classname + " {");
            final.AppendLine("");
            final.AppendLine("    const string libName=\""+dllname+"\";");
            final.AppendLine(sb.ToString());
            final.AppendLine("  }");
            final.AppendLine("}");

            return final.ToString();
        }

        private static string MapArgType(string p)
        {
            if (p.ToUpper() == "UTF8")
                return "[MarshalAs(UnmanagedType.CustomMarshaler, MarshalTypeRef = typeof(UTF8Marshaler))] string";


            return p;   //keep as is
        }

        

        private static string[] SplitOnSpaceAndComma(string line)
        {
            string[] spsplit = line.Split(new string[]{" ", ","}, StringSplitOptions.RemoveEmptyEntries);
            return spsplit;
        }


        private static void SplitAt(string line, out string left, out string right, char splitchar)
        {
            line = line.Trim();

            int spos = line.IndexOf(splitchar);

            if (spos >= 0)
            {
                left = line.Substring(0, spos).Trim();
                right = line.Substring(spos + 1).Trim();
            }
            else
            {
                left = line.Trim();
                right = null;
            }
        }
    }
}
